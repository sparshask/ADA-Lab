-#include <stdio.h>
#include <stdbool.h>

void swap(int *a, int *b)
{
    int temp = *a;
    *a = *b;
    *b = temp;
}

void printPermutation(int P[], int n)
{
    for (int i = 0; i < n; i++)
    {
        printf("%d ", P[i]);
    }
    printf("\n");
}

void johnsonTrotter(int P[], int D[], int n)
{
    bool mobileFound = true;
    while (mobileFound)
    {
        mobileFound = false;
        int mobile = 0;
        int mobileIndex = -1;
        for (int i = 0; i < n; i++)
        {
            if ((D[i] == -1 && i != 0 && P[i] > P[i - 1] && P[i] > mobile) ||
                (D[i] == 1 && i != n - 1 && P[i] > P[i + 1] && P[i] > mobile))
            {
                mobile = P[i];
                mobileIndex = i;
                mobileFound = true;
            }
        }
        if (mobileFound)
        {
            int newIndex = mobileIndex + D[mobileIndex];
            swap(&P[mobileIndex], &P[newIndex]);
            swap(&D[mobileIndex], &D[newIndex]);
            for (int i = 0; i < n; i++)
            {
                if (P[i] > mobile)
                {
                    D[i] *= -1;
                }
            }
            printPermutation(P, n);
        }
    }
}

int main()
{
    int n;
    printf("Enter the number of elements: ");
    scanf("%d", &n);
    int P[n];
    int D[n];
    printf("Enter the elements: ");
    for (int i = 0; i < n; i++)
    {
        scanf("%d", &P[i]);
        D[i] = -1;
    }
    printf("Permutations: \n");
    printPermutation(P, n);
    johnsonTrotter(P, D, n);
    return 0;
}
